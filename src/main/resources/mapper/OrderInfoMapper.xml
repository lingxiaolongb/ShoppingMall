<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itlong.mapper.OrderInfoMapper">
  <resultMap id="BaseResultMap" type="com.itlong.bean.OrderInfo">
    <id column="order_id" jdbcType="VARCHAR" property="orderId" />
    <result column="ugd_id" jdbcType="VARCHAR" property="ugdId" />
    <result column="consignee" jdbcType="VARCHAR" property="consignee" />
    <result column="prod_id" jdbcType="VARCHAR" property="prodId" />
    <result column="prod_name" jdbcType="VARCHAR" property="prodName" />
    <result column="quantity" jdbcType="INTEGER" property="quantity" />
    <result column="total_price" jdbcType="DECIMAL" property="totalPrice" />
    <result column="express_fee" jdbcType="TINYINT" property="expressFee" />
    <result column="order_status" jdbcType="TINYINT" property="orderStatus" />
    <result column="purchase_time" jdbcType="TIMESTAMP" property="purchaseTime" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from order_info
    where order_id = #{orderId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.itlong.bean.OrderInfo">
    insert into order_info (order_id, ugd_id, consignee, 
      prod_id, prod_name, quantity, 
      total_price, express_fee, order_status, 
      purchase_time)
    values (#{orderId,jdbcType=VARCHAR}, #{ugdId,jdbcType=VARCHAR}, #{consignee,jdbcType=VARCHAR}, 
      #{prodId,jdbcType=VARCHAR}, #{prodName,jdbcType=VARCHAR}, #{quantity,jdbcType=INTEGER}, 
      #{totalPrice,jdbcType=DECIMAL}, #{expressFee,jdbcType=TINYINT}, #{orderStatus,jdbcType=TINYINT}, 
      #{purchaseTime,jdbcType=TIMESTAMP})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.itlong.bean.OrderInfo">
    update order_info
    set ugd_id = #{ugdId,jdbcType=VARCHAR},
      consignee = #{consignee,jdbcType=VARCHAR},
      prod_id = #{prodId,jdbcType=VARCHAR},
      prod_name = #{prodName,jdbcType=VARCHAR},
      quantity = #{quantity,jdbcType=INTEGER},
      total_price = #{totalPrice,jdbcType=DECIMAL},
      express_fee = #{expressFee,jdbcType=TINYINT},
      order_status = #{orderStatus,jdbcType=TINYINT},
      purchase_time = #{purchaseTime,jdbcType=TIMESTAMP}
    where order_id = #{orderId,jdbcType=VARCHAR}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select order_id, ugd_id, consignee, prod_id, prod_name, quantity, total_price, express_fee, 
    order_status, purchase_time
    from order_info
    where order_id = #{orderId,jdbcType=VARCHAR}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select order_id, ugd_id, consignee, prod_id, prod_name, quantity, total_price, express_fee, 
    order_status, purchase_time
    from order_info
  </select>

    <resultMap id="orderInfoWithProductInfo" type="OrderInfo" extends="BaseResultMap">
        <association property="productInfo" columnPrefix="prod_"
                     resultMap="com.itlong.mapper.ProductInfoMapper.BaseResultMap" >
        </association>
    </resultMap>

    <!--利用收货id来查询订单内容 注意这里的关系是多对多 -->
    <select id="selectOrderInfoByUgdId" resultMap="orderInfoWithProductInfo" >
        select order_id, ugd_id, consignee, oi.prod_id, oi.prod_name, oi.quantity, oi.total_price, express_fee,
               order_status, purchase_time,
        pi.prod_id prod_prod_id,
        pi.prod_name   prod_prod_name,
        pi.price  prod_price,
        pi.`describe` prod_describe,
        pi.prod_date prod_prod_date,
        pi.Prod_detail prod_Prod_detail,
        pi.prod_pic prod_prod_pic
        from product_info pi,order_info oi
        where  pi.prod_id=oi.prod_id
          AND ugd_id
        <foreach collection="ugdIdList" open="in(" separator="," close=")" item="ugdId">
            #{ugdId}
        </foreach>

    </select>

    <!--批量插入多个订单 -->
    <insert id="insertOrders" parameterType="java.util.List" useGeneratedKeys="false">
        insert into order_info (order_id, ugd_id, consignee,
                                prod_id, prod_name, quantity,
                                total_price, express_fee, order_status,
                                purchase_time)
        values
        <foreach collection="list" separator=","  item="item">
         (
            #{item.orderId,jdbcType=VARCHAR},
            #{item.ugdId,jdbcType=VARCHAR},
            #{item.consignee,jdbcType=VARCHAR},
            #{item.prodId,jdbcType=VARCHAR},
            #{item.prodName,jdbcType=VARCHAR},
            #{item.quantity,jdbcType=INTEGER},
            #{item.totalPrice,jdbcType=DECIMAL},
            #{item.expressFee,jdbcType=TINYINT},
            #{item.orderStatus,jdbcType=TINYINT},
            #{item.purchaseTime,jdbcType=TIMESTAMP}
        )
        </foreach>
    </insert>



</mapper>